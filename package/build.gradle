import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

dependencies {
    compile (project(':service')) {
        exclude group: 'org.jboss.resteasy'
    }

    compile group: 'io.thorntail', name: 'swagger', version: 'latest.release'
    compile group: 'io.thorntail', name: 'swagger-webapp', version: 'latest.release'
    compile group: 'io.thorntail', name: 'cdi', version: 'latest.release'
    compile group: 'io.thorntail', name: 'ejb', version: 'latest.release'
    compile group: 'io.thorntail', name: 'jpa', version: 'latest.release'
}

apply plugin: 'war'
apply plugin: 'thorntail'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'com.bmuschko.docker-remote-api'

thorntail {
    properties {
        swarm."http".port = 8080
        //alternative to project-defaults.yml config
        //thorntail.swagger."web-app".json.path = "/myapp/swagger.json"
        //thorntail.swagger."web-app".context = "/myapp/swagger"
    }

    bundleDependencies = true
    fractions = ['io.thorntail:swagger']
}


task runApp(type: JavaExec, dependsOn: [assemble, 'thorntail-package']) {
    jvmArgs += '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8787'
    main = '-jar'

    doFirst() {
        File file = (project.tasks['jar'].destinationDir as File).listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
                return name.endsWith('-thorntail.jar')
            }
        }).first()
        args file.absolutePath
    }
}


//POSTGRES
task buildPostgresImage(type: DockerBuildImage) {
    inputDir = file('../docker/postgres')
    labels = [name: "myPostgresDB"]
}

task createPostgresContainer(type: DockerCreateContainer) {
    dependsOn buildPostgresImage
    targetImageId buildPostgresImage.getImageId()
    containerName = "postgres_db"
    portBindings = ['5432:5432']
}

task startPostgresContainer(type: DockerStartContainer) {
    dependsOn createPostgresContainer
    targetContainerId createPostgresContainer.getContainerId()
}

task create (type: Dockerfile) {
    instruction 'FROM postgres:latest'
    environmentVariable 'POSTGRES_DB', 'article_shop'
    environmentVariable 'POSTGRES_USER', 'tech_user'
    environmentVariable 'POSTGRES_PASSWORD', 'secret'
}

//FLYWAY
configurations {
    flywayMigration
}

flyway {
    url = 'jdbc:postgresql://192.168.99.100:5432/article_shop'
    user = 'tech_user'
    password = 'secret'
    locations = ["filesystem:${project.projectDir}/src/main/resources/flyway/postgres"]
    configurations = [ 'compileClasspath', 'flywayMigration' ]
}
